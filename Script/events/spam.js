const cfg = require("../../../config/spamConfig");

module.exports.config = {
  name: "spam",
  version: "2.2.0",
  hasPermssion: 0,
  credits: "GPT Modified by SHAHADAT SAHU",
  description: "‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ ‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶∏‡ßç‡¶¨‡¶Ø‡¶º‡¶Ç‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶ø‡¶ï ‡¶¨‡¶æ ‡¶¨‡ßç‡¶Ø‡¶æ‡¶® ‡¶ï‡¶∞‡ßá‡•§",
  commandCategory: "system",
  eventType: ["message"]
};

module.exports.handleEvent = async function ({ api, event, Users }) {
  try {
    if (!event?.body) return;
    const { threadID, senderID, body } = event;
    const message = body.trim();
    const botID = api.getCurrentUserID();

    if (senderID == botID) return;

    if (!global.data) global.data = {};
    if (!global.data.spamTracker) global.data.spamTracker = new Map();
    if (!global.data.userBanned) global.data.userBanned = new Map();

    let threadInfo;
    try { threadInfo = await api.getThreadInfo(threadID); } catch { return; }

    const botIsAdmin = threadInfo.adminIDs.some(i => i.id == botID);
    const isSenderAdmin = threadInfo.adminIDs.some(i => i.id == senderID);

    if (cfg.ADMIN_BYPASS && isSenderAdmin) return;

    // üß∑ Facebook group link detector
    const linkRegex = /(https?:\/\/)?(www\.)?(m\.)?facebook\.com\/groups\/\d+|facebook\.com\/groups\/[A-Za-z0-9\-\_]+|fb\.watch\/[A-Za-z0-9\-\_]+/i;
    if (linkRegex.test(message)) {
      if (!botIsAdmin)
        return api.sendMessage("‚ö†Ô∏è ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ, ‡¶§‡¶æ‡¶á ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§", threadID);

      await api.removeUserFromGroup(senderID, threadID);
      return api.sendMessage("üö´ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶∂‡ßá‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", threadID);
    }

    const normalized = message.replace(/\s+/g, " ").trim();
    let threadMap = global.data.spamTracker.get(threadID);
    if (!threadMap) {
      threadMap = new Map();
      global.data.spamTracker.set(threadID, threadMap);
    }

    const now = Date.now();
    let record = threadMap.get(senderID) || { lastMessage: "", count: 0, firstTime: now };

    if (record.lastMessage === normalized && now - record.firstTime <= cfg.WINDOW_MINUTES * 60 * 1000) {
      record.count++;
    } else {
      record.lastMessage = normalized;
      record.count = 1;
      record.firstTime = now;
    }

    threadMap.set(senderID, record);

    // ‚ö†Ô∏è Warning
    if (record.count === cfg.WARN_AT) {
      const remaining = cfg.MAX_REPEAT - cfg.WARN_AT;
      return api.sendMessage(
        `‚ö†Ô∏è ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ï‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ${cfg.WARN_AT} ‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶ø‡¶Ø‡¶º‡ßá‡¶õ‡ßã!\n‡¶Ü‡¶∞ ${remaining} ‡¶¨‡¶æ‡¶∞ ‡¶™‡¶æ‡¶†‡¶æ‡¶≤‡ßá ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶¨‡ßá‡•§`,
        threadID
      );
    }

    // üö® Ban
    if (record.count >= cfg.MAX_REPEAT && now - record.firstTime <= cfg.WINDOW_MINUTES * 60 * 1000) {
      if (!botIsAdmin)
        return api.sendMessage("‚ö†Ô∏è ‡¶Ü‡¶Æ‡¶ø ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶æ, ‡¶§‡¶æ‡¶á ‡¶∏‡ßç‡¶™‡ßç‡¶Ø‡¶æ‡¶Æ‡¶æ‡¶∞‡¶ï‡ßá ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶õ‡¶ø ‡¶®‡¶æ‡•§", threadID);

      let data = (await Users.getData(senderID))?.data || {};
      data.banned = true;
      await Users.setData(senderID, { data });

      global.data.userBanned.set(senderID, {
        reason: "Repeated spam",
        dateAdded: new Date().toLocaleString("en-GB", { timeZone: "Asia/Dhaka" })
      });

      await api.removeUserFromGroup(senderID, threadID);
      threadMap.delete(senderID);

      return api.sendMessage(
        `üö´ ${record.count} ‡¶¨‡¶æ‡¶∞ ‡¶è‡¶ï‡¶á ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶•‡ßá‡¶ï‡ßá ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡ßá ‡¶¶‡ßá‡¶ì‡¶Ø‡¶º‡¶æ ‡¶π‡¶≤‡ßã‡•§\nüì© ‡¶Ø‡¶¶‡¶ø ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶ø‡¶§‡ßá ‡¶ö‡¶æ‡¶ì, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Ø‡ßã‡¶ó‡¶æ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡ßã‡•§`,
        threadID
      );
    }

    // üßπ ‡¶™‡ßÅ‡¶∞‡ßã‡¶®‡ßã ‡¶°‡ßá‡¶ü‡¶æ ‡¶∞‡¶ø‡¶Æ‡ßÅ‡¶≠
    for (const [uid, rec] of threadMap) {
      if (Date.now() - rec.firstTime > cfg.CLEANUP_AFTER_MS) threadMap.delete(uid);
    }

  } catch (err) {
    console.error("Spam module error:", err);
  }
};

module.exports.run = async function () {};
